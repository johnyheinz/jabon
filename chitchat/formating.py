import re
import random

BOT_NAME = "Жабон"
BOT_NICKNAMES = ["жабон", "jabon", "@jabonbot"]

excuses = [
    "Ты серьезно решил это спросить?",
    "Ага, ясно, давай о другом",
    "Я не знаю, что ответить",
    "Это не та тема, о которой я хотела бы сейчас говорить",
]

busy = [
    "Я сейчас занята, попробуй позже",
    "Я сейчас не могу ответить, попробуй позже",
    "Я сейчас занята, попробуй написать позже",
]

# Список паттернов, при обнаружении которых бот будет отвечать случайной из excuses
excuse_patterns = [
    "сосан",
    "сосет",
    "сосут",
    "сосешь",
    "слаба.?к.?",
    "чмыр",
    "д.бил",
    "нихуя",
    "гонево",
    "выдувало",
    "яйце(голов..|мозгов..)",
    "(?:^|[^а-я])образин",
    "чмошн",
    "(?:^|[^а-я])чмо(?:$|[^а-я])",
    "(?:^|[^а-я])пид[^ж]",
    "(?:^|[^а-я])борз.й",
    "уеб",
    "бе(з|с) ?мозг",
    "с[cр]ан",
    "вы[еи][бп]",
    "(на|вы)куси",
    "(?:^|[^а-я])упыр",
    "мразь",
    "тварь",
    "хул",
    "гопник",
    "трындец",
    "(?:^|[^а-я]|[^м].)хер",
    "тел(оч)?к.",
    "нихр?.ра ?с[ие]бе",
    "пошля.?к.?",
    "(?:^|[^а-я])н[еи] ?сс?ы",
    "(?:^|[^а-я])(д|л)нр(?:$|[^а-я])",
    "(твоюж? ?|вашу ?)мать",
    "(?:^|[^а-я])гон(и|я)..?",
    "свиноподоб",
    "(со|на)?жра(чк|т|л)..?",
    "(?:^|[^а-я])куй",
    "[зн]а[ие][пб]а",
    "пизд",
    "скотина",
    "петуш...?ся",
    "дерьм",
    "срач",
    "(?:^|[^а-я])вор(?:$|[^а-я])",
    "укра(л|дет)",
    "жулик",
    "п[ао]скуд",
    "баланд",
    "неч(е|и)сть",
    "нелюд",
    "(?:^|[^а-я])бл(ии+|ее+)н(?:$|[^а-я])",
    "(?:^|[^а-я])п[ие]*п[ие]*ц(?:$|[^а-я])",
    "(?:^|[^а-я])раб.?.?(?:$|[^а-я])",
    "(?:^|[^а-я])рабск",
    "хрен",
    "жоп",
    "(?:^|[^м])орал",
    "(?:^|[ыоа])ору",
    "дебил",
    "имбецил",
    "кретин",
    "даун",
    "холу",
    "(?:^|[^а-я])сук(?:$|[аиу])",
    "(?:^|[^а-я])ска(?:$|[^а-я])",
    "дур",
    "гни[лвд]",
    "фиг",
    "(?:^|[^а-я])жирн",
    "ненави",
    "(по?шел|по?шла|по?шли) вон",
    "вон[ьяю]",
    "падл",
    "хуев",
]


def clean_response(text):
    if len(re.findall(r"(sber|сбер)", text, re.IGNORECASE)) > 0:
        return random.choice(excuses)
    text = re.sub("%bot_name", BOT_NAME, text)
    return text


def clean_request(text) -> str | None:
    text = re.sub(BOT_NAME, "%bot_name", text)
    # заменить упоминания типа [id123|Иван] на Иван
    text = re.sub(r"\[id\d+\|([^\]]+)\]", r"\1", text)
    # заменить упоминания из списка BOT_NICKNAMES на %bot_name
    for nickname in BOT_NICKNAMES:
        text = re.sub(nickname, "%bot_name", text)
    # если в сообщении есть один из паттернов из списка excuse_patterns, то вернуть None
    for pattern in excuse_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            return None
    return text


def get_excuse() -> str:
    return random.choice(excuses)


def get_busy() -> str:
    return random.choice(busy)


# паттерн для поиска эмодзи в тексте
EMOJI_PATTERN = re.compile(
    r"[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]+"
)

# функция поиска эмодзи в тексте
# возвращает первое найденное эмодзи или None
def find_emoji(text) -> str | None:
    match = EMOJI_PATTERN.search(text)
    if match:
        return match.group(0)
    return None


# убираем эмодзи из текста
def remove_emoji(text) -> str:
    text = EMOJI_PATTERN.sub(". ", text)
    text = text.replace(" .", ".")
    while text.endswith(".") or text.endswith(" "):
        text = text[:-1]
    return text
